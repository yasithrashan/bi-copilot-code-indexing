{
  "query": "Modify the PUT /books/{bookId} endpoint to reuse the validation logic (validateAndFormatBook) so updates also check for empty titles, negative prices, etc.",
  "relevant_chunks": [
    {
      "score": 0.797413826,
      "payload": {
        "content": "Book validatedBook = {\n        id: bookId,\n        title: bookRequest.title.trim(),\n        author: bookRequest.author.trim(),\n        isbn: bookRequest.isbn.trim(),\n        price: bookRequest.price,\n        quantity: bookRequest.quantity\n    };",
        "type": "module_variable",
        "name": null,
        "file": "main.bal",
        "line": 39,
        "endLine": 46,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:variable:Book",
        "hash": "8396cad7f7162354",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.793704033,
      "payload": {
        "content": "Book|error validatedBook = validateAndFormatBook(bookRequest);",
        "type": "module_variable",
        "name": null,
        "file": "main.bal",
        "line": 109,
        "endLine": 109,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:variable:error",
        "hash": "eb8dce286ed35bb7",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.786197722,
      "payload": {
        "content": "function validateAndFormatBook(BookRequest bookRequest) returns Book|error {\n    if bookRequest.title.trim().length() == 0 {\n        return error(\"Book title cannot be empty\");\n    }\n\n    if bookRequest.author.trim().length() == 0 {\n        return error(\"Book author cannot be empty\");\n    }\n\n    if bookRequest.price < 0.0d {\n        return error(\"Book price cannot be negative\");\n    }\n\n    if bookRequest.quantity < 0 {\n        return error(\"Book quantity cannot be negative\");\n    }\n\n    string bookId = uuid:createType1AsString();\n\n    Book validatedBook = {\n        id: bookId,\n        title: bookRequest.title.trim(),\n        author: bookRequest.author.trim(),\n        isbn: bookRequest.isbn.trim(),\n        price: bookRequest.price,\n        quantity: bookRequest.quantity\n    };\n\n    return validatedBook;\n}",
        "type": "function",
        "name": null,
        "file": "main.bal",
        "line": 20,
        "endLine": 20,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:function:validateAndFormatBook",
        "hash": "aae18c159835d322",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.736201286,
      "payload": {
        "content": "Book updatedBook = {\n            id: bookId,\n            title: bookRequest.title,\n            author: bookRequest.author,\n            isbn: bookRequest.isbn,\n            price: bookRequest.price,\n            quantity: bookRequest.quantity\n        };",
        "type": "module_variable",
        "name": null,
        "file": "main.bal",
        "line": 126,
        "endLine": 133,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:variable:Book",
        "hash": "d45e8ced629f91cc",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.706889153,
      "payload": {
        "content": "resource function post books(@http:Payload BookRequest bookRequest) returns http:Created|http:BadRequest|http:InternalServerError {\ntotalRequests += 1;\n\n        Book|error validatedBook = validateAndFormatBook(bookRequest);\n        if validatedBook is error {\n            return http:BAD_REQUEST;\n        }\n\n        bookStore[validatedBook.id] = validatedBook;\n        return http:CREATED;\n}",
        "type": "resource",
        "name": null,
        "file": "main.bal",
        "line": 55,
        "endLine": 59,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:service:bookstore:post:books",
        "hash": "aa4778bbe0607ed2",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.622091353,
      "payload": {
        "content": "Book book = bookStore.get(k = bookId);",
        "type": "module_variable",
        "name": null,
        "file": "main.bal",
        "line": 99,
        "endLine": 99,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:variable:Book",
        "hash": "2dbc87c7d6841957",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.601960182,
      "payload": {
        "content": "resource function post books/search(@http:Payload BookSearchCriteria searchCriteria) returns Book[]|http:InternalServerError {\ntotalRequests += 1;\n\n        Book[] allBooks = bookStore.toArray();\n        Book[] filteredBooks = [];\n\n        foreach Book book in allBooks {\n            boolean matches = true;\n\n            string? titleCriteria = searchCriteria.title;\n            if titleCriteria is string {\n                if !book.title.toLowerAscii().includes(titleCriteria.toLowerAscii()) {\n                    matches = false;\n                }\n            }\n\n            string? authorCriteria = searchCriteria.author;\n            if authorCriteria is string && matches {\n                if !book.author.toLowerAscii().includes(authorCriteria.toLowerAscii()) {\n                    matches = false;\n                }\n            }\n\n            string? isbnCriteria = searchCriteria.isbn;\n            if isbnCriteria is string && matches {\n                if !book.isbn.includes(isbnCriteria) {\n                    matches = false;\n                }\n            }\n\n            decimal? minPriceCriteria = searchCriteria.minPrice;\n            if minPriceCriteria is decimal && matches {\n                if book.price < minPriceCriteria {\n                    matches = false;\n                }\n            }\n\n            decimal? maxPriceCriteria = searchCriteria.maxPrice;\n            if maxPriceCriteria is decimal && matches {\n                if book.price > maxPriceCriteria {\n                    matches = false;\n                }\n            }\n\n            if matches {\n                filteredBooks.push(book);\n            }\n        }\n\n        return filteredBooks;\n}",
        "type": "resource",
        "name": null,
        "file": "main.bal",
        "line": 106,
        "endLine": 109,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:service:bookstore:post:books/search",
        "hash": "73abfcfc12a19109",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.596301079,
      "payload": {
        "content": "public type BookRequest record {|\n    string title;\n    string author;\n    string isbn;\n    decimal price;\n    int quantity;\n|};",
        "type": "type_definition",
        "name": null,
        "file": "types.bal",
        "line": 12,
        "endLine": 18,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:types:type:BookRequest",
        "hash": "956d291fa8805eac",
        "moduleName": "ballerina"
      }
    }
  ]
}