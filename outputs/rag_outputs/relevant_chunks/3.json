{
  "query": "Modify the update books endpoint to prevent duplicate ISBNs and return a 409 Conflict error if a book with the same ISBN already exists.",
  "relevant_chunks": [
    {
      "score": 0.63535881,
      "payload": {
        "content": "Book updatedBook = {\n            id: bookId,\n            title: bookRequest.title,\n            author: bookRequest.author,\n            isbn: bookRequest.isbn,\n            price: bookRequest.price,\n            quantity: bookRequest.quantity\n        };",
        "type": "module_variable",
        "name": null,
        "file": "main.bal",
        "line": 126,
        "endLine": 133,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:variable:Book",
        "hash": "d45e8ced629f91cc",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.600417137,
      "payload": {
        "content": "resource function post books(@http:Payload BookRequest bookRequest) returns http:Created|http:BadRequest|http:InternalServerError {\ntotalRequests += 1;\n\n        Book|error validatedBook = validateAndFormatBook(bookRequest);\n        if validatedBook is error {\n            return http:BAD_REQUEST;\n        }\n\n        bookStore[validatedBook.id] = validatedBook;\n        return http:CREATED;\n}",
        "type": "resource",
        "name": null,
        "file": "main.bal",
        "line": 55,
        "endLine": 59,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:service:bookstore:post:books",
        "hash": "aa4778bbe0607ed2",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.588721335,
      "payload": {
        "content": "configurable int maxBooksPerPage = 10;",
        "type": "configurable_variable",
        "name": null,
        "file": "main.bal",
        "line": 8,
        "endLine": 8,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:configurable:maxBooksPerPage",
        "hash": "82058f20caaff18a",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.586056709,
      "payload": {
        "content": "Book validatedBook = {\n        id: bookId,\n        title: bookRequest.title.trim(),\n        author: bookRequest.author.trim(),\n        isbn: bookRequest.isbn.trim(),\n        price: bookRequest.price,\n        quantity: bookRequest.quantity\n    };",
        "type": "module_variable",
        "name": null,
        "file": "main.bal",
        "line": 39,
        "endLine": 46,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:variable:Book",
        "hash": "8396cad7f7162354",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.577834189,
      "payload": {
        "content": "function validateAndFormatBook(BookRequest bookRequest) returns Book|error {\n    if bookRequest.title.trim().length() == 0 {\n        return error(\"Book title cannot be empty\");\n    }\n\n    if bookRequest.author.trim().length() == 0 {\n        return error(\"Book author cannot be empty\");\n    }\n\n    if bookRequest.price < 0.0d {\n        return error(\"Book price cannot be negative\");\n    }\n\n    if bookRequest.quantity < 0 {\n        return error(\"Book quantity cannot be negative\");\n    }\n\n    string bookId = uuid:createType1AsString();\n\n    Book validatedBook = {\n        id: bookId,\n        title: bookRequest.title.trim(),\n        author: bookRequest.author.trim(),\n        isbn: bookRequest.isbn.trim(),\n        price: bookRequest.price,\n        quantity: bookRequest.quantity\n    };\n\n    return validatedBook;\n}",
        "type": "function",
        "name": null,
        "file": "main.bal",
        "line": 20,
        "endLine": 20,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:function:validateAndFormatBook",
        "hash": "aae18c159835d322",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.575331688,
      "payload": {
        "content": "Book|error validatedBook = validateAndFormatBook(bookRequest);",
        "type": "module_variable",
        "name": null,
        "file": "main.bal",
        "line": 109,
        "endLine": 109,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:variable:error",
        "hash": "eb8dce286ed35bb7",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.56235218,
      "payload": {
        "content": "public type BookRequest record {|\n    string title;\n    string author;\n    string isbn;\n    decimal price;\n    int quantity;\n|};",
        "type": "type_definition",
        "name": null,
        "file": "types.bal",
        "line": 12,
        "endLine": 18,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:types:type:BookRequest",
        "hash": "956d291fa8805eac",
        "moduleName": "ballerina"
      }
    },
    {
      "score": 0.558103621,
      "payload": {
        "content": "resource function get books(int page = 1, int 'limit = maxBooksPerPage) returns PaginatedBooks|http:InternalServerError {\ntotalRequests += 1;\n\n        Book[] allBooks = bookStore.toArray();\n        int totalCount = allBooks.length();\n        int startIndex = (page - 1) * 'limit;\n        int endIndex = startIndex + 'limit;\n\n        if startIndex >= totalCount {\n            PaginatedBooks emptyResult = {\n                books: [],\n                totalCount: totalCount,\n                currentPage: page,\n                totalPages: (totalCount + 'limit - 1) / 'limit\n            };\n            return emptyResult;\n        }\n\n        if endIndex > totalCount {\n            endIndex = totalCount;\n        }\n\n        Book[] paginatedBooks = [];\n        int index = startIndex;\n        while index < endIndex {\n            paginatedBooks.push(allBooks[index]);\n            index += 1;\n        }\n\n        PaginatedBooks result = {\n            books: paginatedBooks,\n            totalCount: totalCount,\n            currentPage: page,\n            totalPages: (totalCount + 'limit - 1) / 'limit\n        };\n\n        return result;\n}",
        "type": "resource",
        "name": null,
        "file": "main.bal",
        "line": 2,
        "endLine": 7,
        "position": {
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          }
        },
        "id": "ballerina:main:service:bookstore:get:books",
        "hash": "1a3e29413cc7e999",
        "moduleName": "ballerina"
      }
    }
  ]
}