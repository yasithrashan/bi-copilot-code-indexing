{
  "sourceDirectory": "/Users/yasithrashan/Documents/workspace/wso2/bi-copilot-code-indexing/ballerina",
  "chunks": [
    {
      "id": "14f19ac82e58e85d",
      "content": "import ballerina/http;"
    },
    {
      "id": "f4e55604c08aa237",
      "content": "import ballerina/time;"
    },
    {
      "id": "851449f4a95a2cf4",
      "content": "import ballerina/uuid;"
    },
    {
      "id": "764d8d390c45814d",
      "content": "configurable int servicePort = 8080;"
    },
    {
      "id": "89f61107b633505b",
      "content": "configurable string serviceName = \"Bookstore API\";"
    },
    {
      "id": "af54e75ff12f2992",
      "content": "configurable int maxBooksPerPage = 10;"
    },
    {
      "id": "205492ba4628f36c",
      "content": "configurable boolean debugMode = false;"
    },
    {
      "id": "cf2404093c66a22d",
      "content": "int totalRequests = 0;"
    },
    {
      "id": "d5fe9d7ce70b3294",
      "content": "map<BookCategory> bookCategories = {};"
    },
    {
      "id": "4e44fa7c5b7642f8",
      "content": "map<Book> bookStore = {};"
    },
    {
      "id": "768586d3a685d248",
      "content": "string bookId = uuid:createType1AsString();"
    },
    {
      "id": "d214cba54e33af53",
      "content": "Book validatedBook = {\n        id: bookId,\n        title: bookRequest.title.trim(),\n        author: bookRequest.author.trim(),\n        isbn: bookRequest.isbn.trim(),\n        price: bookRequest.price,\n        quantity: bookRequest.quantity\n    };"
    },
    {
      "id": "8646ba8709b002e8",
      "content": "Book[] allBooks = bookStore.toArray();"
    },
    {
      "id": "680a2648b9ab4422",
      "content": "int totalCount = allBooks.length();"
    },
    {
      "id": "730e47df058808ea",
      "content": "int startIndex = (page - 1) * 'limit;"
    },
    {
      "id": "d4751506e5106071",
      "content": "int endIndex = startIndex + 'limit;"
    },
    {
      "id": "7de4dc4bba0d2e8c",
      "content": "PaginatedBooks emptyResult = {\n                books: [],\n                totalCount: totalCount,\n                currentPage: page,\n                totalPages: (totalCount + 'limit - 1) / 'limit\n            };"
    },
    {
      "id": "fb708f22ee611c2b",
      "content": "Book[] paginatedBooks = [];"
    },
    {
      "id": "d0b3ecf1180f1ced",
      "content": "int index = startIndex;"
    },
    {
      "id": "e5e61bee409f3339",
      "content": "PaginatedBooks result = {\n            books: paginatedBooks,\n            totalCount: totalCount,\n            currentPage: page,\n            totalPages: (totalCount + 'limit - 1) / 'limit\n        };"
    },
    {
      "id": "84a90aa8dab19f15",
      "content": "Book book = bookStore.get(k = bookId);"
    },
    {
      "id": "e5681b3b7ba3e87f",
      "content": "Book|error validatedBook = validateAndFormatBook(bookRequest);"
    },
    {
      "id": "52e29cc3ee0a0c0c",
      "content": "Book updatedBook = {\n            id: bookId,\n            title: bookRequest.title,\n            author: bookRequest.author,\n            isbn: bookRequest.isbn,\n            price: bookRequest.price,\n            quantity: bookRequest.quantity\n        };"
    },
    {
      "id": "0c77d2e89039391e",
      "content": "Book removedBook = bookStore.remove(k = bookId);"
    },
    {
      "id": "835a2bcafa819ac1",
      "content": "Book[] filteredBooks = [];"
    },
    {
      "id": "09781fa80d53aa2b",
      "content": "boolean matches = true;"
    },
    {
      "id": "8adc9374811be7fe",
      "content": "ServiceStats stats = {\n            totalRequests: totalRequests,\n            totalBooks: bookStore.length(),\n            serviceStartTime: startTimeString,\n            serviceName: serviceName,\n            debugMode: debugMode\n        };"
    },
    {
      "id": "8649149376003efd",
      "content": "function validateAndFormatBook(BookRequest bookRequest) returns Book|error {\n    if bookRequest.title.trim().length() == 0 {\n        return error(\"Book title cannot be empty\");\n    }\n\n    if bookRequest.author.trim().length() == 0 {\n        return error(\"Book author cannot be empty\");\n    }\n\n    if bookRequest.price < 0.0d {\n        return error(\"Book price cannot be negative\");\n    }\n\n    if bookRequest.quantity < 0 {\n        return error(\"Book quantity cannot be negative\");\n    }\n\n    string bookId = uuid:createType1AsString();\n\n    Book validatedBook = {\n        id: bookId,\n        title: bookRequest.title.trim(),\n        author: bookRequest.author.trim(),\n        isbn: bookRequest.isbn.trim(),\n        price: bookRequest.price,\n        quantity: bookRequest.quantity\n    };\n\n    return validatedBook;\n}"
    },
    {
      "id": "a8cbd00c419bb8b2",
      "content": "service /bookstore on new http:Listener(servicePort) {"
    },
    {
      "id": "0f2d758ae7d9a8cd",
      "content": "resource function get books(int page = 1, int 'limit = maxBooksPerPage) returns PaginatedBooks|http:InternalServerError {\n        totalRequests += 1;\n\n        Book[] allBooks = bookStore.toArray();\n        int totalCount = allBooks.length();\n        int startIndex = (page - 1) * 'limit;\n        int endIndex = startIndex + 'limit;\n\n        if startIndex >= totalCount {\n            PaginatedBooks emptyResult = {\n                books: [],\n                totalCount: totalCount,\n                currentPage: page,\n                totalPages: (totalCount + 'limit - 1) / 'limit\n            };\n            return emptyResult;\n        }\n\n        if endIndex > totalCount {\n            endIndex = totalCount;\n        }\n\n        Book[] paginatedBooks = [];\n        int index = startIndex;\n        while index < endIndex {\n            paginatedBooks.push(allBooks[index]);\n            index += 1;\n        }\n\n        PaginatedBooks result = {\n            books: paginatedBooks,\n            totalCount: totalCount,\n            currentPage: page,\n            totalPages: (totalCount + 'limit - 1) / 'limit\n        };\n\n        return result;\n    }"
    },
    {
      "id": "010988f3ad5028fb",
      "content": "resource function post books(@http:Payload BookRequest bookRequest) returns http:Created|http:BadRequest|http:InternalServerError {\n        totalRequests += 1;\n\n        Book|error validatedBook = validateAndFormatBook(bookRequest);\n        if validatedBook is error {\n            return http:BAD_REQUEST;\n        }\n\n        bookStore[validatedBook.id] = validatedBook;\n        return http:CREATED;\n    }"
    },
    {
      "id": "797765f86dfceed2",
      "content": "resource function post books/search(@http:Payload BookSearchCriteria searchCriteria) returns Book[]|http:InternalServerError {\n        totalRequests += 1;\n\n        Book[] allBooks = bookStore.toArray();\n        Book[] filteredBooks = [];\n\n        foreach Book book in allBooks {\n            boolean matches = true;\n\n            string? titleCriteria = searchCriteria.title;\n            if titleCriteria is string {\n                if !book.title.toLowerAscii().includes(titleCriteria.toLowerAscii()) {\n                    matches = false;\n                }\n            }\n\n            string? authorCriteria = searchCriteria.author;\n            if authorCriteria is string && matches {\n                if !book.author.toLowerAscii().includes(authorCriteria.toLowerAscii()) {\n                    matches = false;\n                }\n            }\n\n            string? isbnCriteria = searchCriteria.isbn;\n            if isbnCriteria is string && matches {\n                if !book.isbn.includes(isbnCriteria) {\n                    matches = false;\n                }\n            }\n\n            decimal? minPriceCriteria = searchCriteria.minPrice;\n            if minPriceCriteria is decimal && matches {\n                if book.price < minPriceCriteria {\n                    matches = false;\n                }\n            }\n\n            decimal? maxPriceCriteria = searchCriteria.maxPrice;\n            if maxPriceCriteria is decimal && matches {\n                if book.price > maxPriceCriteria {\n                    matches = false;\n                }\n            }\n\n            if matches {\n                filteredBooks.push(book);\n            }\n        }\n\n        return filteredBooks;\n    }"
    },
    {
      "id": "2ee2fdeaac8eedfb",
      "content": "resource function get health() returns map<string> {\n        totalRequests += 1;\n        return {\"status\": \"UP\", \"service\": serviceName};\n    }"
    },
    {
      "id": "0d90db078fd4b90a",
      "content": "service /admin on new http:Listener(servicePort) {"
    },
    {
      "id": "a208c7e7720bf9c8",
      "content": "resource function get stats() returns ServiceStats {\n        totalRequests += 1;\n\n        string startTimeString = time:utcToString(serviceStartTime);\n\n        ServiceStats stats = {\n            totalRequests: totalRequests,\n            totalBooks: bookStore.length(),\n            serviceStartTime: startTimeString,\n            serviceName: serviceName,\n            debugMode: debugMode\n        };\n\n        return stats;\n    }"
    },
    {
      "id": "04b15706e7f67ef4",
      "content": "resource function post categories(@http:Payload BookCategory category) returns http:Created|http:BadRequest {\n        totalRequests += 1;\n\n        if category.categoryName.trim().length() == 0 {\n            return http:BAD_REQUEST;\n        }\n\n        bookCategories[category.categoryId] = category;\n        return http:CREATED;\n    }"
    },
    {
      "id": "6f4f513653428276",
      "content": "resource function get categories() returns BookCategory[] {\n        totalRequests += 1;\n        return bookCategories.toArray();\n    }"
    },
    {
      "id": "de786c91442499ee",
      "content": "type\npublic type Book record {|\n    string id;"
    },
    {
      "id": "c3517bd60c3c3aa3",
      "content": "public type BookRequest record {|\n    string title;\n    string author;\n    string isbn;\n    decimal price;\n    int quantity;\n|};"
    },
    {
      "id": "6f1fb1b2574d5ecf",
      "content": "type\npublic type ErrorResponse record {|\n    string message;"
    },
    {
      "id": "991f64e4075097f6",
      "content": "type\npublic type PaginatedBooks record {|\n    Book[] books;"
    },
    {
      "id": "5616b759c9afb3a7",
      "content": "type\npublic type BookSearchCriteria record {|\n    string? title;"
    },
    {
      "id": "4d2a5146eeba66ee",
      "content": "type\npublic type ServiceStats record {|\n    int totalRequests;"
    },
    {
      "id": "51ba709d2b3afad4",
      "content": "type\npublic type BookCategory record {|\n    string categoryId;"
    }
  ]
}