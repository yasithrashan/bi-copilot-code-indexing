=== QUERY ID 4 ===
Extend the category service to also support update and delete operations for categories.

=== API DOC USED ===
api_docs/4.json

=== EXTRACTED CODE USED ===
agentic_outputs/expand_code/4.md

=== TOKEN USAGE ===
{
  "langLibs": 13563,
  "apiDocs": 606,
  "balMdContent": 1423,
  "extractedCode": 256,
  "userQuery": 22,
  "systemPrompt": 16867,
  "generatedCode": 696,
  "totalInput": 17159,
  "toolCalls": 14
}

=== GENERATED CODE RESPONSE ===
Based on the extracted code, I can see the current category service implementation in the `/admin` service with POST and GET operations. I'll extend it to include PUT (update) and DELETE operations for categories.

<code filename="main.bal">
```ballerina
service /admin on new http:Listener(servicePort) {
    // Add book category
    resource function post categories(@http:Payload BookCategory category) returns http:Created|http:BadRequest {
        totalRequests += 1;

        if category.categoryName.trim().length() == 0 {
            return http:BAD_REQUEST;
        }

        bookCategories[category.categoryId] = category;
        return http:CREATED;
    }

    // Get all categories
    resource function get categories() returns BookCategory[] {
        totalRequests += 1;
        return bookCategories.toArray();
    }

    // Update book category
    resource function put categories/[string categoryId](@http:Payload BookCategory category) returns BookCategory|http:NotFound|http:BadRequest {
        totalRequests += 1;

        if category.categoryName.trim().length() == 0 {
            return http:BAD_REQUEST;
        }

        if !bookCategories.hasKey(categoryId) {
            return http:NOT_FOUND;
        }

        // Ensure the categoryId matches the path parameter
        BookCategory updatedCategory = {
            categoryId: categoryId,
            categoryName: category.categoryName,
            description: category.description
        };

        bookCategories[categoryId] = updatedCategory;
        return updatedCategory;
    }

    // Delete book category
    resource function delete categories/[string categoryId]() returns http:NoContent|http:NotFound {
        totalRequests += 1;

        if !bookCategories.hasKey(categoryId) {
            return http:NOT_FOUND;
        }

        _ = bookCategories.remove(categoryId);
        return http:NO_CONTENT;
    }
}
```
</code>

The extended category service now includes:

1. **PUT `/admin/categories/[categoryId]`** - Updates an existing category:
   - Takes the category ID as a path parameter
   - Validates that the category name is not empty
   - Returns 404 if the category doesn't exist
   - Returns 400 for invalid data
   - Ensures the categoryId in the response matches the path parameter
   - Returns the updated category on success

2. **DELETE `/admin/categories/[categoryId]`** - Deletes a category:
   - Takes the category ID as a path parameter
   - Returns 404 if the category doesn't exist
   - Returns 204 No Content on successful deletion
   - Removes the category from the bookCategories map

Both operations increment the totalRequests counter for statistics tracking, maintain consistency with the existing error handling patterns, and follow RESTful conventions.

