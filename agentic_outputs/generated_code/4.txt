=== QUERY ID 4 ===
Extend the category service to also support update and delete operations for categories.

=== API DOC USED ===
api_docs/4.json

=== EXTRACTED CODE USED ===
agentic_outputs/expand_code/4.md

=== GENERATED CODE RESPONSE ===
Now I'll extend the category service to support update and delete operations. Based on the extracted code, I can see the current admin service has POST and GET operations for categories. I'll add PUT and DELETE operations.

<code filename="main.bal">
```ballerina
service /admin on new http:Listener(servicePort) {
    // Add book category
    resource function post categories(@http:Payload BookCategory category) returns http:Created|http:BadRequest {
        totalRequests += 1;

        if category.categoryName.trim().length() == 0 {
            return http:BAD_REQUEST;
        }

        bookCategories[category.categoryId] = category;
        return http:CREATED;
    }

    // Get all categories
    resource function get categories() returns BookCategory[] {
        totalRequests += 1;
        return bookCategories.toArray();
    }

    // Update book category
    resource function put categories/[string categoryId](@http:Payload BookCategory category) returns BookCategory|http:NotFound|http:BadRequest {
        totalRequests += 1;

        if category.categoryName.trim().length() == 0 {
            return http:BAD_REQUEST;
        }

        if !bookCategories.hasKey(categoryId) {
            return http:NOT_FOUND;
        }

        // Ensure the categoryId in the path matches the one in the payload
        BookCategory updatedCategory = {
            categoryId: categoryId,
            categoryName: category.categoryName,
            description: category.description
        };

        bookCategories[categoryId] = updatedCategory;
        return updatedCategory;
    }

    // Delete book category
    resource function delete categories/[string categoryId]() returns http:NoContent|http:NotFound {
        totalRequests += 1;

        if !bookCategories.hasKey(categoryId) {
            return http:NOT_FOUND;
        }

        _ = bookCategories.remove(categoryId);
        return http:NO_CONTENT;
    }

    // Get specific category by ID
    resource function get categories/[string categoryId]() returns BookCategory|http:NotFound {
        totalRequests += 1;

        if !bookCategories.hasKey(categoryId) {
            return http:NOT_FOUND;
        }

        return bookCategories.get(categoryId);
    }
}
```
</code>

The extended category service now includes:

1. **PUT `/admin/categories/{categoryId}`** - Updates an existing category
   - Takes the category ID as a path parameter
   - Accepts a `BookCategory` payload with updated information
   - Validates that the category name is not empty
   - Returns `404 Not Found` if the category doesn't exist
   - Returns `400 Bad Request` for invalid data
   - Returns the updated category on success

2. **DELETE `/admin/categories/{categoryId}`** - Deletes a category
   - Takes the category ID as a path parameter
   - Returns `404 Not Found` if the category doesn't exist
   - Returns `204 No Content` on successful deletion

3. **GET `/admin/categories/{categoryId}`** - Retrieves a specific category (bonus endpoint)
   - Takes the category ID as a path parameter
   - Returns the category if found
   - Returns `404 Not Found` if the category doesn't exist

These new endpoints follow RESTful conventions and maintain consistency with the existing bookstore API patterns, including proper error handling and request counting for statistics.

