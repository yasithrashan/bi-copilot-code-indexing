=== QUERY ID 4 ===
Extend the category service to also support update and delete operations for categories.

=== API DOC USED ===
api_docs/4.json

=== EXTRACTED CODE USED ===
agentic_outputs/expand_code/4.md

=== GENERATED CODE RESPONSE ===
Now I can see the current category service implementation. I need to extend it with PUT and DELETE operations for categories. Based on the extracted code, I can see the current structure and add the missing operations.

<code filename="main.bal">
```ballerina
service /admin on new http:Listener(servicePort) {
    // Add book category
    resource function post categories(@http:Payload BookCategory category) returns http:Created|http:BadRequest {
        totalRequests += 1;

        if category.categoryName.trim().length() == 0 {
            return http:BAD_REQUEST;
        }

        bookCategories[category.categoryId] = category;
        return http:CREATED;
    }

    // Get all categories
    resource function get categories() returns BookCategory[] {
        totalRequests += 1;
        return bookCategories.toArray();
    }

    // Get category by ID
    resource function get categories/[string categoryId]() returns BookCategory|http:NotFound|http:InternalServerError {
        totalRequests += 1;

        if !bookCategories.hasKey(categoryId) {
            return http:NOT_FOUND;
        }

        BookCategory? category = bookCategories[categoryId];
        if category is BookCategory {
            return category;
        }
        return http:INTERNAL_SERVER_ERROR;
    }

    // Update category
    resource function put categories/[string categoryId](@http:Payload BookCategory updatedCategory) returns BookCategory|http:NotFound|http:BadRequest|http:InternalServerError {
        totalRequests += 1;

        if updatedCategory.categoryName.trim().length() == 0 {
            return http:BAD_REQUEST;
        }

        if !bookCategories.hasKey(categoryId) {
            return http:NOT_FOUND;
        }

        // Update the category with the provided categoryId
        BookCategory categoryToUpdate = {
            categoryId: categoryId,
            categoryName: updatedCategory.categoryName,
            description: updatedCategory.description
        };

        bookCategories[categoryId] = categoryToUpdate;
        return categoryToUpdate;
    }

    // Delete category
    resource function delete categories/[string categoryId]() returns http:NoContent|http:NotFound|http:InternalServerError {
        totalRequests += 1;

        if !bookCategories.hasKey(categoryId) {
            return http:NOT_FOUND;
        }

        BookCategory removedCategory = bookCategories.remove(categoryId);
        return http:NO_CONTENT;
    }
}
```
</code>

I've extended the category service in the admin endpoints with the following new operations:

## New Category Operations Added:

### 1. **GET `/admin/categories/[categoryId]`**
- Retrieves a specific category by ID
- Returns `BookCategory` if found, `404 Not Found` if category doesn't exist
- Returns `500 Internal Server Error` for unexpected errors

### 2. **PUT `/admin/categories/[categoryId]`**
- Updates an existing category
- Takes a `BookCategory` object in the request body
- Validates that the category name is not empty
- Returns the updated `BookCategory` on success
- Returns `404 Not Found` if category doesn't exist
- Returns `400 Bad Request` for invalid data
- The categoryId in the URL takes precedence over the one in the request body

### 3. **DELETE `/admin/categories/[categoryId]`**
- Deletes a category by ID
- Returns `204 No Content` on successful deletion
- Returns `404 Not Found` if category doesn't exist
- Returns `500 Internal Server Error` for unexpected errors

## Key Features:
- **Proper error handling**: Each endpoint handles missing categories and validation errors
- **Request counting**: All endpoints increment the `totalRequests` counter
- **Validation**: Category name validation ensures empty names are rejected
- **RESTful design**: Follows REST conventions with appropriate HTTP methods and status codes
- **Path parameter handling**: Uses Ballerina's path parameter syntax `[string categoryId]`

The extended service now provides full CRUD (Create, Read, Update, Delete) operations for book categories, making it a complete category management system.

