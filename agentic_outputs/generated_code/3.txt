=== QUERY ID 3 ===
Modify the update books endpoint to prevent duplicate ISBNs and return a 409 Conflict error if a book with the same ISBN already exists.

=== API DOC USED ===
api_docs/3.json

=== EXTRACTED CODE USED ===
agentic_outputs/expand_code/3.md

=== TOKEN USAGE ===
{
  "langLibs": 13563,
  "apiDocs": 458,
  "balMdContent": 1423,
  "extractedCode": 329,
  "userQuery": 39,
  "systemPrompt": 16719,
  "generatedCode": 609,
  "totalInput": 17101,
  "toolCalls": 14
}

=== GENERATED CODE RESPONSE ===
Now I can see the current implementation of the update books endpoint. I need to modify it to check for duplicate ISBNs before updating the book. Based on the project structure, I'll need to add a validation to prevent updating a book with an ISBN that already exists for a different book.

<code filename="main.bal">
```ballerina
// Update an existing book
resource function put books/[string bookId](@http:Payload BookRequest bookRequest) returns Book|http:NotFound|http:BadRequest|http:Conflict|http:InternalServerError {
    totalRequests += 1;

    if !bookStore.hasKey(k = bookId) {
        return http:NOT_FOUND;
    }

    // Check for duplicate ISBN in other books
    foreach Book existingBook in bookStore {
        if existingBook.isbn == bookRequest.isbn && existingBook.id != bookId {
            http:Conflict conflictResponse = {
                body: {
                    message: string `A book with ISBN '${bookRequest.isbn}' already exists`
                }
            };
            return conflictResponse;
        }
    }

    Book updatedBook = {
        id: bookId,
        title: bookRequest.title,
        author: bookRequest.author,
        isbn: bookRequest.isbn,
        price: bookRequest.price,
        quantity: bookRequest.quantity
    };

    bookStore[bookId] = updatedBook;
    return updatedBook;
}
```
</code>

The key changes I made to the update books endpoint:

1. **Added `http:Conflict` to the return type** - This allows the endpoint to return a 409 Conflict status code.

2. **Added ISBN duplicate validation** - Before updating the book, the code now iterates through all existing books to check if any other book (with a different ID) has the same ISBN.

3. **Return 409 Conflict error** - If a duplicate ISBN is found, the endpoint returns an `http:Conflict` response with a descriptive error message indicating which ISBN is already in use.

4. **Preserve existing behavior** - The existing validation for book existence (404 Not Found) remains unchanged, and the update logic continues to work the same way when there are no conflicts.

The validation ensures that:
- A book can keep its own ISBN when being updated (by checking `existingBook.id != bookId`)
- No two different books can have the same ISBN
- The error message is clear and informative for API consumers

This modification maintains the existing functionality while adding the requested duplicate ISBN prevention with proper HTTP status code handling.

